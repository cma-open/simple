# #####################################################################################
# GitHub workflow action file
# Runs all tests against the installed system on the runner
# #####################################################################################


# Name for workflow (also displayed on the associated badges)
name: tests

# on: controls when the action will run.
# Triggers the workflow on push or pull request events
# Limits run only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Set environment variables so this workflow action is easy to re-use in other repos
env:
  REPO_NAME: simple
  PACKAGE: simple # Name of package directory within repo
  CONDA_ENV: simple-env # Name is set in the $ENV_FILE
  ENV_FILE: environment.yml
  REMOTE_TESTS: True # To configure test behaviour

jobs:
  run-tests:
    timeout-minutes: 20 # Limit total time use of the workflow action
    runs-on: ubuntu-latest
    env:
      REMOTE_TESTS: True
    steps:
    - uses: actions/checkout@v3 # checkout code to the runner workspace root
    - name: Install dependencies
      run: |
        conda env create -f $ENV_FILE
    - name: conda check
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        which python
        python --version
        conda info --envs
    - name: Install
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        # note the behaviour of full vs editable install here
        # note impact of package structure (src, tests, etc.)
        pip install -e . -v
    - name: Run all tests (local editable install)
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        cd scripts/tests
        chmod +x test
        ./test
    - name: Test with coverage
      # Re-run the tests and report test coverage
      # Does not fail with error code if any tests fail, output is for info only
      # The separate step is needed to ensure the job fails if there are failing tests
      # This enables the code coverage stats to be visible
      # via the actions workflow page on GitHub
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        # Show report in the terminal
        pytest --cov-report term --cov=$GITHUB_WORKSPACE $GITHUB_WORKSPACE/tests
        echo
        # Run tests and produce output report in xml, with coverage stats
        pytest --cov-report xml:coverage.xml --cov=$GITHUB_WORKSPACE $GITHUB_WORKSPACE/tests
        echo "$PWD"
        ls
        # xml report will be automatically picked up by a workflow action
    - name: Run codacy-coverage-reporter
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        # or
        # api-token: ${{ secrets.CODACY_API_TOKEN }}
        coverage-reports: coverage.xml
    - name: Uninstall the package
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        pip uninstall -y $PACKAGE -v
    - name: Install the package in user mode (site-packages)
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        pip install . -v
    - name: Check install
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        pip show $PACKAGE
    - name: Run all tests (verify full user install)
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        # run pytest against installed package
                cd scripts/tests
        chmod +x test
        ./test
        # Step used as an example to show testing of installed package
        # vs local editable code
