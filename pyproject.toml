# pyproject.toml

# This package no longer uses setup.or or setup.cfg

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "simple"
authors = [
    {name = "Jonathan Winn"},
    #{name = "Jonathan Winn", email = "N/A"},
]
description = "A simple python package with command line tools and test examples."
readme = "README.md"
requires-python = ">=3.10"
#license = {text = "BSD-3-Clause"}
license = {file = "LICENSE"}
dynamic = ["version"]  # enable dynamic version numbering via seuptools_scm

# TODO - review later
#[project.urls]
#Homepage = "https://example.com"
#Documentation = "https://readthedocs.org"
#Repository = "https://github.com/cma-open/simple"
#Changelog = "https://github.com/me/spam/blob/master/CHANGELOG.md"



# TODO - to review later
#[project.optional-dependencies]
#pdf = ["ReportLab>=1.2", "RXP"]
#rest = ["docutils>=0.3", "pack ==1.1, ==1.3"]

# Set all command line scripts
# These are added as command line options once the system is installed
[project.scripts]
# format is: my-script = "my_package.module:function"

# Tested + working - does not use additional setup_system_log()
system-setup = "simple.setup.system_setup:system_setup"  # no argparse
cli-simple  = "simple.cli:cli_entry_point"  # uses argparse
create-data-options = "simple.cli:cli_data"  # uses argparse

# Tested + working - has setup_system_log() in subpackage init
confirm-config = "simple.status.checks:confirm_config"  # no argparse
create-data = "simple.netcdf.data:main"  # no argparse
clean = "simple.io.io:main"  # no argparse
demo-logs = "simple.demos.demos:demo_logs"  # no argparse
system-version = "simple.status.checks:show_version"  # no argparse


[tool.setuptools_scm]
#  keyword arguments to be supplied to get_version().
# autogenerate version file
version_file = "src/simple/_version.py"
# as a default include-package-data = true
# CalVer date versioning
version_scheme = "calver-by-date"
# SemVer branch versioning
#version_scheme = "release-branch-semver"


# Set option pytest settings. Commented out for now.
# [tool.pytest.ini_options]
# addopts = "--tb=long -vrA" # verbose output, displays short test summary info and includes traceback

# Set isort config for use by pre-commit so that it is compatible with black
[tool.isort]
profile = "black"
multi_line_output = 3

# Config for black
[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # Example use: also separately exclude a file named foo.py in
                     # the root of the project
)
'''

# TODO - check issues below
#####################################################################
# Architecture / design / code review notes (training use)
#####################################################################
# This includes data files WITHIN the src package
# PyPA recommends that any data files you wish to be accessible
# at run time be included inside the package.
# Check and review use of other methods if files from repo root
# are also needed
# Note - there are other methods to specify data files from version
# control and using package_data option.
# For now use of MANIFEST.in is acceptable.
# Review in Q1 2024. See #35
# Refs
# https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html#subdirectory-for-data-files
# https://packaging.python.org/en/latest/guides/using-manifest-in/
# https://docs.python.org/3/library/importlib.resources.html#module-importlib.resources
